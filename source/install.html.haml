.title.is-3 Install instructions

.notification.is-warning
  .columns
    .column.is-1.has-text-centered
      %span.icon.is-large
        %i.mdi.mdi-alert.mdi-48px
    .column
      This app is meant to be executed locally within your home network: no extra attention
      was paid to security regarding external attacks or access management.
      You can however put it behind
      %a(href="https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-http-basic-authentication/" target="_blank") basic auth
      and/or other restrictions via either
      %a(href="https://nginx.org/en/" target="_blank") nginx
      or
      %a( target="_blank"href="https://apache.org/") apache
      , use
      %a(href="https://openvpn.net/community-resources/how-to/" target="_blank") your own
      local
      %a(href="https://restoreprivacy.com/vpn/" target="_blank") VPN
      , or a
      %a(href="https://www.howtogeek.com/168145/how-to-use-ssh-tunneling/" target="_blank") SSH tunnel
      \.
      %br
      Since version 0.30.0 you can enable basic auth within the app via the
      %em basic_auth
      field in
      %em Menu > Tools > Settings
      \.

.title.is-4.mt-4.mb-2 1. Initial installation

.notification.is-info
  .columns
    .column.is-1.has-text-centered
      %span.icon.is-large
        %i.mdi.mdi-alert-circle-outline.mdi-48px
    .column
      You can do a
      %strong local installation
      or use a
      %strong docker image
      \: they are functionally equals however the
      %em local installation
      can run external programs installed in the same system (like a file manager,
      terminal, image editor, ...) but the
      %em docker image
      cannot.

.title.is-5.mt-4.mb-2
  1.1 Using
  %span.is-family-monospace docker
.pl-5
  %pre<
    %code.language-shell
      :plain
        # download image
        docker pull ryogachan/djmngr:latest

        # run image
        docker run --rm -ti --name djmngr \
          -p "3000:3000" \
          -v /path/to/db:/app/storage             \
          -v /path/to/library:/app/dj-library     \
          -v /path/to/epub:/app/public/epub       \
          -v /path/to/thumbs:/app/public/thumbs   \
          -v /path/to/samples:/app/public/samples \
          ryogachan/djmngr

Then visit
%a(href="http://localhost:3000/") http://localhost:3000/
\.

.title.is-5.mt-4.mb-2
  1.2 Using
  = link_to 'docker-compose', 'https://docs.docker.com/get-started/08_using_compose/',
    class: 'is-family-monospace', target: '_blank'
.pl-5
  %pre<
    %code.language-shell
      :plain
        # download image
        docker pull ryogachan/djmngr:latest

        # download and customize docker-compose file
        wget https://github.com/ryoga-chan/djmngr/raw/main/docker/compose.yml

        # edit port/folders in compose.yml, then:
        docker compose up -d  # start app in background
        docker compose down   # stop app

Then visit
%a(href="http://localhost:3000/") http://localhost:3000/
\.

.title.is-5.mt-4.mb-2 1.3 Local installation
.pl-5
  %pre<
    %code.language-shell
      :plain
        # install prerequisites
        apt install coreutils findutils grep zip unzip \
          libkakasi2-dev libsqlite3-0 sqlite3 p7zip-full nodejs \
          libvips-dev libjpeg62-turbo-dev libpng-dev webp imagemagick
        
        # install optional tools
        apt install mcomix thunar xfce4-terminal
        
        # install ruby (you can use RBENV, RVM, or system package)
        curl -sSL https://get.rvm.io | bash -s stable
        rvm install "3.3.0"  # match version in `ruby 'x.y.z'` line within Gemfile

        # clone repository
        git clone https://github.com/ryoga-chan/djmngr.git
        cd djmngr

        # install gems
        bundle install

        # run database migrations
        RAILS_ENV=production ./bin/rails db:migrate

        # run standalone server
        RAILS_SERVE_STATIC_FILES=true ./bin/server p

%b Note:
If you don't have set a
%a(href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry" target="_blank")
  github RubyGems registry personal access token
you can alternatively add the variable
%tt PHASHION_USE_GITHUB_SRC
to the last three commands in order to fetch gem sources directly:

.pl-5
  %pre<
    %code.language-shell
      :plain
        PHASHION_USE_GITHUB_SRC=true bundle install
        PHASHION_USE_GITHUB_SRC=true RAILS_ENV=production ./bin/rails db:migrate
        PHASHION_USE_GITHUB_SRC=true RAILS_SERVE_STATIC_FILES=true ./bin/server p

On the first run wait a moment for assets compilation to finish, then visit
%a(href="http://localhost:39102/") http://localhost:39102/
\.

.mt-1
  %b Note:
  It is
  %em recommended
  to run the server with
  %tt ./bin/server p
  behind a
  %em reverse proxy
  like Nginx or Apache because they are better at serving many static files
  (e.g. take a look at this project's
  %a(href="https://github.com/ryoga-chan/djmngr/blob/main/docker/etc/nginx/nginx.conf" target="_blank") nginx.conf
  file).

.title.is-4.mt-4.mb-2 2. Post installation

.content
  %ul
    %li
      Configure the app in the
      %em Menu > Tools > Settings
      page
    %li
      Your database is stored in the file
      %tt /app_dir/storage/production.sqlite3
    %li
      EPUB files are saved in
      %tt /app_dir/public/epub/
    %li
      ZIP thumbnails are stored in
      %tt /app_dir/public/thumbs/

.title.is-4.mt-4.mb-2 3. How to update

.title.is-5.mt-4.mb-2 3.1 Docker

Just increase the image version tag or pull again the
%em latest
tag then run it, database migrations will run automatically.

.title.is-5.mt-4.mb-2 3.2 Local installation

.pl-5
  %pre<
    %code.language-shell
      :plain
        git pull        # update sources
        
        bundle install  # update gems

        # run database migrations
        RAILS_ENV=production ./bin/rails db:migrate
